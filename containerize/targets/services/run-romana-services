#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "${0##*/}: entrypoint for romana services container."
	echo "Options:"
	echo " -h or --help: print usage"
	echo " --api-server: URL for Kubernetes API Server, eg: http://127.0.0.1:8080"
	echo " --ip-address: IP Address for the Romana services. If not provided, address of eth0 will be used"
	echo " --interface: Interface for IP Address lookup, instead of eth0"
	echo " --cidr: The CIDR used for Romana IPs (mandatory)"
	echo " --nodes: Number of nodes in the cluster. Used for internal Romana configuration (default: 256)"
	echo " --namespaces: The number of namespaces that will be created. Used for internal Romana configuration (default: 16)"
	echo " --segments: The number of segments that will be permitted within a namespace. Used for internal Romana configuration (default: 16)"
	echo " --policies: Enable network policy features (default: true)"
	echo " --cloud: Integration with cloud provider. (default: none. valid values: none, aws)"
}

# Parse command-line options
api_server=
ip_address=
interface=
cidr=
nodes=256
namespaces=16
segments=16
policies=
cloud=none
while [[ $1 == -* ]]; do
	# expand --foo=bar options
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--api-server)
		api_server="$2"
		shift 2
		;;
	--ip-address)
		ip_address="$2"
		shift 2
		;;
	--interface)
		interface="$2"
		shift 2
		;;
	--cidr)
		cidr="$2"
		shift 2
		;;
	--namespaces)
		namespaces="$2"
		shift 2
		;;
	--nodes)
		nodes="$2"
		shift 2
		;;
	--segments)
		segments="$2"
		shift 2
		;;
	--policies)
		policies="$2"
		shift 2
		;;
	--cloud)
		cloud="$2"
		shift 2
		;;
	*)
		echo "Unknown option '$1'"
		usage
		exit 1
		;;
	esac
done

usage_error() {
	if (($# < 1)); then
		internal_error "Call to usage_error without a message"
	fi
	echo "Error:" "$@"
	usage
	exit 1
}
	
internal_error() {
	echo "Internal Error:" "$@"
	exit 2
}

# Validate options provided
case "$cloud" in
none|aws)
	# OK
	;;
*)
	usage_error "Invalid value for --cloud: $cloud"
	;;
esac

# If IP address wasn't provided, try to look it up
if ! [[ "$ip_address" ]]; then
	found=0
	if ! [[ "$interface" ]]; then
		interface=eth0
	fi
	while read -r first second _; do
		if [[ "$first" = "inet" ]]; then
			ip_address="${second%/*}"
			found=1
		       	break
		fi
	done < <(ip addr show "$interface")
	if ! ((found)); then
		usage_error "Unable to find IP address using interface '$interface'. Use --interface to specify a different interface or --ip-address to provide the address"
	fi
fi

# Romana CIDR must be set
if ! [[ "$cidr" ]]; then
	usage_error "Romana CIDR must be provided."
fi

# Use apiserver option if provided, otherwise look for environment variables
# for the kubernetes.default service. Fail if these aren't provided.
if ! [[ "$api_server" ]]; then
	if [[ "$KUBERNETES_SERVICE_HOST" ]] && [[ "$KUBERNETES_SERVICE_PORT_HTTPS" ]]; then
		api_server="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS"
	fi
fi
if ! [[ "$api_server" ]]; then
	usage_error "Unable to find apiserver via command-line option or default service. Use --apiserver to specify an address for kube-apiserver."
fi

# Check that we can connect to the apiserver
if [[ -f "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt" ]]; then
	kubectl_cert="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
fi
if [[ -f "/var/run/secrets/kubernetes.io/serviceaccount/token" ]]; then
	kubectl_token="$(< /var/run/secrets/kubernetes.io/serviceaccount/token)"
fi
kubectl_options=(
	--server="$api_server"
	${kubectl_cert:+--certificate-authority="$kubectl_cert"}
	${kubectl_token:+--token="$kubectl_token"}
)

printf "Checking connection to kubernetes api-server..."
if ! kubectl_output=$(kubectl "${kubectl_options[@]}" version 2>&1); then
	printf "error: %s\n" "$(grep -v "^Client Version:" <<< "$kubectl_output")"
	exit 1
fi
printf "ok.\n"

valid_bool() {
	if (($# != 1)); then
		internal_error "valid_bool(): expected 1 parameter, got $#"
	fi
	case "$1" in
	true|false)
		;;
	*)
		return 1
		;;
	esac
	return 0
}

valid_number() {
	if (($# != 1)); then
		internal_error "valid_number(): expected 1 parameter, got $#"
	fi
	if ! printf "%d\n" "$1" &> /dev/null; then
		return 1
	fi
	return 0
}

valid_cidr() {
	if (($# != 1)); then
		internal_error "valid_cidr(): expected 1 parameter, got $#"
	fi
	# Split w.x.y.z/p into pieces.
	local w x y z p r v
	IFS='./' read -r w x y z p r <<< "$1"
	if [[ "$r" ]]; then
		# Additional data in the CIDR. Return error.
		return 1
	fi
	# Check w, x, y, z are valid numbers from 0-255.
	error=0
	for v in "$w" "$x" "$y" "$z"; do
		if ! valid_number "$v"; then
			error=1
			break
		fi
		if ! ((v >= 0 && v < 256)); then
			error=1
			break
		fi
	done

	if ((error)); then
		return 1
	fi
	# Check p is some value between 0 and 32.
	if ! valid_number "$p"; then
		return 1
	fi
	if ! ((v >= 0 && v <= 32)); then
		return 1
	fi
	
	# Passed checks. return OK
	return 0
}
	
# Check policies option is valid. Defaults to true if not specified
if [[ "$policies" ]]; then
	if ! valid_bool "$policies"; then
		usage_error "Expected 'true' or 'false' for --policies option. ('$policies')"
	fi
else
	policies=true
fi

if ! valid_cidr "$cidr"; then
	usage_error "CIDR '$cidr' is not valid."
fi

cidr_bits() {
	if (($# != 1)); then
		internal_error "cidr_bits(): expected 1 parameter, got $#"
	fi
	if ! valid_cidr "$1"; then
		internal_error "cidr_bits(): '$1' is not a valid CIDR."
	fi
	local p
	IFS='./' read -r _ _ _ _ p _ <<< "$1"
	printf "%d" "$p"
}

bits() {
	if (($# != 1)); then
		internal_error "bits(): expected 1 parameter, got $#"
	fi
	if ! valid_number "$1"; then
		internal_error "bits(): '$1' is not a valid number."
	fi
	if (( $1 <= 0 )); then
		internal_error "bits(): '$1' is not a positive number."
	fi
	local i
	for ((i=1; 2**i < $1; i++)); do :; done
	printf "%d\n" "$i"
}

# Generate the root config file using values from command-line options
# and calculation of bits required
cidr_bits=$(cidr_bits "$cidr")
node_bits=$(bits "$nodes")
namespace_bits=$(bits "$namespaces")
segment_bits=$(bits "$segments")
endpoint_bits=$((32 - cidr_bits - node_bits - namespace_bits - segment_bits))
if (( endpoint_bits < 3 )); then
	# TODO: make this value smaller when IP addresses are allocated from .0 instead of .3
	echo "Insufficient space for allocating addresses. Please assess your configuration."
	echo "CIDR $cidr uses $cidr_bits bits."
	echo "$nodes nodes uses $node_bits bits."
	echo "$namespaces namespaces uses $namespace_bits bits."
	echo "$segments segments uses $segment_bits bits."
	usage_error "$endpoint_bits bits remaining for endpoints. A minimum of 3 bits is required."
fi

replacements=()
replacements+=( -e 's|romana-master-address|'"$ip_address"'|g' )
replacements+=( -e 's|mysql-root-password|'"$MYSQL_ROOT_PASSWORD"'|g' )
replacements+=( -e 's|kubernetes-apiserver|'"$api_server"'|g' )
replacements+=( -e 's|romana-cidr|'"$cidr"'|g' )
replacements+=( -e 's|host-bits|'"$node_bits"'|g' )
replacements+=( -e 's|tenant-bits|'"$namespace_bits"'|g' )
replacements+=( -e 's|segment-bits|'"$segment_bits"'|g' )
replacements+=( -e 's|endpoint-bits|'"$endpoint_bits"'|g' )
replacements+=( -e 's|policies-enabled|'"$policies"'|g' )
sed "${replacements[@]}" /var/lib/romana/templates/romana.conf.template > /etc/romana/romana.conf.yml

# Check if etcd is running. Execute a version query
printf "Checking if etcd is running..."
if ! etcd_response=$(curl -s http://127.0.0.1:12379/version ); then
	printf "error connecting to etcd\n"
	exit 1
fi
etcd_version=$(jq -r '.etcdserver' <<< "$etcd_response")
if ! [[ "$etcd_version" ]]; then
	printf "error checking etcd version"
	exit 1
fi
printf "ok. etcd version is %s\n" "$etcd_version"

# Check if mysqladmin can connect to the database
printf "Checking if database is running..."
if ! mysqladmin ${MYSQL_ROOT_PASSWORD:+--password="$MYSQL_ROOT_PASSWORD"} --host=127.0.0.1 status &>/dev/null; then
	printf "mysqladmin status failed\n"
	exit 1
fi
printf "OK.\n"

# Check if databases already exist
services=( tenant ipam policy )
databases=( tenant ipam policy )
printf "Checking if databases already exist:\n"
for i in "${!databases[@]}"; do
	if mysql ${MYSQL_ROOT_PASSWORD:+--password="$MYSQL_ROOT_PASSWORD"} --host=127.0.0.1 "${databases[i]}" &>/dev/null; then
		# If we connected successfully, delete from list
		printf "%s found.\n" "${databases[i]}"
		unset services[i] databases[i]
	else
		printf "%s not found.\n" "${databases[i]}"
	fi
done

# Add topology service
# TODO: Improve this in the future when we know the paths that should exist
#       if installation has already been performed
services+=( topology )

# Create any missing databases
if (( ${#services[@]} )); then
	# Start the root service (temporarily)
	printf "Launching root service..."
	/usr/local/bin/root -c /etc/romana/romana.conf.yml &>/dev/null &
	root_svc=$!

	# Wait until it's ready / listening on :9600
	intervals=( 0.5 0.5 0.5 1 4 )
	ready=0
	for i in "${intervals[@]}"; do
		sleep "$i"
		{ read -r _; read -r status; } < <(ss -nlt '( sport = :9600 )')
		if [[ "$status" ]]; then
			# Found a match
			ready=1
			break
		else
			printf " ."
		fi
	done
	if ! (( ready )); then
		printf " root service not running.\b"
		exit 1
	fi
	printf " OK\n"

	# Create databases for ones that were missing
	for i in "${!services[@]}"; do
		printf "Creating database for %s\n" "${services[i]}"
		/usr/local/bin/"${services[i]}" -rootURL "http://$ip_address:9600" -createSchema
	done
	
	# Stop the root service
	printf "Stopping root service..."
	kill "$root_svc"
	wait "$root_svc"
	printf "OK\n"
fi

# Generate .romana.yml for romana cli tool
replacements=()
replacements+=( -e 's|romana-master-address|'"$ip_address"'|g' )
sed "${replacements[@]}" /var/lib/romana/templates/dot-romana.template > /root/.romana.yml

# Generate romana-services.conf for supervisord
replacements=()
replacements+=( -e 's|romana-master-address|'"$ip_address"'|g' )
sed "${replacements[@]}" /var/lib/romana/templates/romana-services.template > /etc/supervisor/conf.d/romana-services.conf

# Configure kubectl
kubectl config set-cluster kubernetes --embed-certs ${kubectl_cert:+--certificate-authority="$kubectl_cert"} --server="$api_server"
if [[ "${kubectl_token}" ]]; then
	kubectl config set-credentials romana-services --token="$kubectl_token"
fi
kubectl config set-context romana-services@kubernetes --user=romana-services --cluster=kubernetes
kubectl config use-context romana-services@kubernetes

# Enable cloud integrations
case "$cloud" in
aws)
	# No values to substitute, just use "template" as-is
	cp /var/lib/romana/templates/romana-aws.template /etc/supervisor/conf.d/romana-aws.conf
	;;
none)
;;
esac

# Run things via supervisord
printf "Launching Romana services via supervisord\n"
exec supervisord
