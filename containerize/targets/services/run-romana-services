#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "${0##*/}: entrypoint for romana services container."
	echo "Options:"
	echo " -h or --help: print usage"
	echo " --api-server: URL for Kubernetes API Server, eg: http://127.0.0.1:8080"
	echo " --cidr: The CIDR used for Romana IPs (mandatory)"
	echo " --policies: Enable network policy features (default: true)"
	echo " --cloud: Integration with cloud provider. (default: none. valid values: none, aws)"
}

# Parse command-line options
api_server=
cidr=
policies=
cloud=none
interhost_routes=
route_publisher=none
while [[ $1 == -* ]]; do
	# expand --foo=bar options
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--api-server)
		api_server="$2"
		shift 2
		;;
	--cidr)
		cidr="$2"
		shift 2
		;;
	--policies)
		policies="$2"
		shift 2
		;;
	--cloud)
		cloud="$2"
		shift 2
		;;
	--interhost_routes)
		interhost_routes="$2"
		shift 2
		;;
	--x-route-publisher)
		route_publisher="$2"
		shift 2
		;;
	*)
		echo "Unknown option '$1'"
		usage
		exit 1
		;;
	esac
done

usage_error() {
	if (($# < 1)); then
		internal_error "Call to usage_error without a message"
	fi
	echo "Error:" "$@"
	usage
	exit 1
}
	
internal_error() {
	echo "Internal Error:" "$@"
	exit 2
}

# Validate options provided
case "$cloud" in
none|aws)
	# OK
	;;
*)
	usage_error "Invalid value for --cloud: $cloud"
	;;
esac

case "$route_publisher" in
none|bird)
	# OK
	;;
*)
	usage_error "Invalid value for --x-route-publisher: $route_publisher"
	;;
esac

# Romana CIDR must be set
if ! [[ "$cidr" ]]; then
	usage_error "Romana CIDR must be provided."
fi

# Use apiserver option if provided, otherwise look for environment variables
# for the kubernetes.default service. Fail if these aren't provided.
if ! [[ "$api_server" ]]; then
	if [[ "$KUBERNETES_SERVICE_HOST" ]] && [[ "$KUBERNETES_SERVICE_PORT_HTTPS" ]]; then
		api_server="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS"
	fi
fi
if ! [[ "$api_server" ]]; then
	usage_error "Unable to find apiserver via command-line option or default service. Use --apiserver to specify an address for kube-apiserver."
fi

# NODENAME environment variable must be set
if ! [[ "$NODENAME" ]]; then
	usage_error "Ensure NODENAME is specified in your deployment for romana-services"
fi

# Check that we can connect to the apiserver
if [[ -f "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt" ]]; then
	kubectl_cert="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
fi
if [[ -f "/var/run/secrets/kubernetes.io/serviceaccount/token" ]]; then
	kubectl_token="$(< /var/run/secrets/kubernetes.io/serviceaccount/token)"
fi
kubectl_options=(
	--server="$api_server"
	${kubectl_cert:+--certificate-authority="$kubectl_cert"}
	${kubectl_token:+--token="$kubectl_token"}
)

printf "Checking connection to kubernetes api-server..."
if ! kubectl_output=$(kubectl "${kubectl_options[@]}" version 2>&1); then
	printf "error: %s\n" "$(grep -v "^Client Version:" <<< "$kubectl_output")"
	exit 1
fi
printf "ok.\n"

# Look up IP address of this node via NODENAME variable
host_ip=$(kubectl get node "$NODENAME" -o json | jq -r '.status.addresses[] | select(.type=="InternalIP") | .address')
if ! [[ "$host_ip" ]]; then
	internal_error "Error requesting InternalIP from apiserver for $NODENAME"
fi

valid_bool() {
	if (($# != 1)); then
		internal_error "valid_bool(): expected 1 parameter, got $#"
	fi
	case "$1" in
	true|false)
		;;
	*)
		return 1
		;;
	esac
	return 0
}

valid_number() {
	if (($# != 1)); then
		internal_error "valid_number(): expected 1 parameter, got $#"
	fi
	if ! printf "%d\n" "$1" &> /dev/null; then
		return 1
	fi
	return 0
}

valid_cidr() {
	if (($# != 1)); then
		internal_error "valid_cidr(): expected 1 parameter, got $#"
	fi
	# Split w.x.y.z/p into pieces.
	local w x y z p r v
	IFS='./' read -r w x y z p r <<< "$1"
	if [[ "$r" ]]; then
		# Additional data in the CIDR. Return error.
		return 1
	fi
	# Check w, x, y, z are valid numbers from 0-255.
	error=0
	for v in "$w" "$x" "$y" "$z"; do
		if ! valid_number "$v"; then
			error=1
			break
		fi
		if ! ((v >= 0 && v < 256)); then
			error=1
			break
		fi
	done

	if ((error)); then
		return 1
	fi
	# Check p is some value between 0 and 32.
	if ! valid_number "$p"; then
		return 1
	fi
	if ! ((v >= 0 && v <= 32)); then
		return 1
	fi
	
	# Passed checks. return OK
	return 0
}
	
# Check policies option is valid. Defaults to true if not specified
if [[ "$policies" ]]; then
	if ! valid_bool "$policies"; then
		usage_error "Expected 'true' or 'false' for --policies option. ('$policies')"
	fi
else
	policies=true
fi

# Check interhost-routes option is valid. Defaults to true if not specified
if [[ "$interhost_routes" ]]; then
	if ! valid_bool "$interhost_routes"; then
		usage_error "Expected 'true' or 'false' for --interhost-routes option. ('$interhost_routes')"
	fi
else
	interhost_routes=true
fi

if ! valid_cidr "$cidr"; then
	usage_error "CIDR '$cidr' is not valid."
fi

bits() {
	if (($# != 1)); then
		internal_error "bits(): expected 1 parameter, got $#"
	fi
	if ! valid_number "$1"; then
		internal_error "bits(): '$1' is not a valid number."
	fi
	if (( $1 <= 0 )); then
		internal_error "bits(): '$1' is not a positive number."
	fi
	local i
	for ((i=1; 2**i < $1; i++)); do :; done
	printf "%d\n" "$i"
}

replacements=()
replacements+=( -e 's|romana-master-address|'"$host_ip"'|g' )
replacements+=( -e 's|kubernetes-apiserver|'"$api_server"'|g' )
replacements+=( -e 's|romana-cidr|'"$cidr"'|g' )
replacements+=( -e 's|policies-enabled|'"$policies"'|g' )
replacements+=( -e 's|interhost-routes-enabled|'"$interhost_routes"'|g' )
case "$route_publisher" in
bird)
	replacements+=( -e '/publisher-config/r/var/lib/romana/templates/route-publisher-bird.template' )
	;;
*)
	;;
esac
replacements+=( -e 's|route-publisher|'"$route_publisher"'|g' )
replacements+=( -e 's|publisher-config||g' )

# Check if etcd is running. Execute a version query
printf "Checking if etcd is running..."
intervals=( 0 1 1 1 3 3 3 )
etcd_ready=0
for i in "${intervals[@]}"; do
	sleep "$i"
	if etcd_response=$(curl -s http://127.0.0.1:12379/version ); then
		etcd_ready=1
	fi
done
if ! (( etcd_ready )); then
	printf "error connecting to etcd\n"
	exit 1
fi
etcd_version=$(jq -r '.etcdserver' <<< "$etcd_response")
if ! [[ "$etcd_version" ]]; then
	printf "error checking etcd version"
	exit 1
fi
printf "ok. etcd version is %s\n" "$etcd_version"

# Generate .romana.yml for romana cli tool
replacements=()
replacements+=( -e 's|romana-master-address|'"$host_ip"'|g' )
sed "${replacements[@]}" /var/lib/romana/templates/dot-romana.template > /root/.romana.yml

# Generate romana-services.conf for supervisord
replacements=()
replacements+=( -e 's|romana-master-address|'"$host_ip"'|g' )
sed "${replacements[@]}" /var/lib/romana/templates/romana-services.template > /etc/supervisor/conf.d/romana-services.conf

# Configure kubectl
kubectl config set-cluster kubernetes --embed-certs ${kubectl_cert:+--certificate-authority="$kubectl_cert"} --server="$api_server"
if [[ "${kubectl_token}" ]]; then
	kubectl config set-credentials romana-services --token="$kubectl_token"
fi
kubectl config set-context romana-services@kubernetes --user=romana-services --cluster=kubernetes
kubectl config use-context romana-services@kubernetes

# Enable cloud integrations
case "$cloud" in
aws)
	# No values to substitute, just use "template" as-is
	cp /var/lib/romana/templates/romana-aws.template /etc/supervisor/conf.d/romana-aws.conf
	;;
none)
;;
esac

# Run things via supervisord
printf "Launching Romana services via supervisord\n"
exec supervisord
