#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "usage: romana-compile [options]"
	echo " --github-key:          private key to access github repositories"
	echo " --core-repo:           git@ or https:// address of core repo"
	echo " --core-branch:         git branch/tag/sha of core to build"
}

core_repo=
core_branch=
while [[ $1 == -* ]]; do
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--github-key)
		export GIT_SSH=/var/tmp/git-ssh
		shift 2
		;;
	--core-repo)
		core_repo="$2"
		shift 2
		;;
	--core-branch)
		core_branch="$2"
		shift 2
		;;
	*)
		usage "Unrecognized option '$1'"
		exit 1
		;;
esac; done

if [[ -d /go/src/github.com/romana/core ]] && [[ "$(git -C /go/src/github.com/romana/core config remote.origin.url)" = "$core_repo" ]]; then
	echo "using existing repo"
elif ! git clone "$core_repo" /go/src/github.com/romana/core; then
	echo "failed to clone '$core_repo'"
	exit 1
fi
if ! git -C /go/src/github.com/romana/core fetch; then
	echo "failed to fetch"
	exit 1
fi
if [[ "$core_branch" ]] && ! git -C /go/src/github.com/romana/core checkout "$core_branch"; then
	echo "failed to checkout '$core_branch'"
	exit 1
fi
if [[ "$(git -C /go/src/github.com/romana/core symbolic-ref --short -q HEAD)" ]] && ! git -C /go/src/github.com/romana/core pull; then
	echo "failed to pull"
	exit 1
fi
if ! git -C /go/src/github.com/romana/core submodule update --init --recursive; then
	echo "failed to submodule update"
	exit 1
fi
while IFS= read -r p; do pkgs+=("$p"); done < <(go list -f '{{ if eq .Name "main" }}{{ .ImportPath }}{{ end }}' github.com/romana/core/... | grep -v /vendor/)

if (( ${#pkgs[@]} == 0 )); then
	echo "failed to list main packages"
fi
if ! go install "${pkgs[@]}"; then
	echo "failed to compile core packages"
fi
additional_packages=(
	kube-cni-proxy
	fix-ec2-srcdestcheck
	romana-aws
)
go get -d "${additional_packages[@]}"
if ! go install kube-cni-proxy fix-ec2-srcdestcheck romana-aws; then
	echo "failed to compile additional packages"
fi
