#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "${0##*/}: entrypoint for romana services container."
	echo "Options:"
	echo " -h or --help: print usage"
	echo " --romana-root: URL for Romana Root service, eg: http://127.0.0.1:9600"
	echo " --interface: Interface for IP Address lookup, instead of eth0"
	echo " --nat: Add NAT rule for traffic coming from pods"
	echo " --nat-interface: Interface that NATs traffic, instead of eth0 or --interface setting."
	echo " --cluster-ip-cidr: CIDR for cluster IPs. Excluded from NAT rule."
	echo " --pod-to-host: Permit pods to connect to the host server"
}

# Parse command-line options
usage=0
romana_root=
interface=
nat=
nat_interface=
cluster_ip_cidr=
pod_to_host=
cni_image="quay.io/romana/cni"
while [[ $1 == -* ]]; do
	# expand --foo=bar options
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--romana-root)
		romana_root="$2"
		shift 2
		;;
	--interface)
		interface="$2"
		shift 2
		;;
	--nat)
		nat="$2"
		shift 2
		;;
	--nat-interface)
		nat_interface="$2"
		shift 2
		;;
	--cluster-ip-cidr)
		cluster_ip_cidr="$2"
		shift 2
		;;
	--pod-to-host)
		pod_to_host="$2"
		shift 2
		;;
	--cni-image)
		cni_image="$2"
		shift 2
		;;
	*)
		echo "Unknown option '$1'"
		usage
		exit 1
		;;
	esac
done

usage_error() {
	if (($# < 1)); then
		internal_error "Call to usage_error without a message"
	fi
	echo "Error:" "$@"
	usage
	exit 1
}
	
internal_error() {
	echo "Internal Error:" "$@"
	exit 2
}

# If usage was requested, call usage function
if ((usage)); then
	usage
	exit 0
fi

# Romana Root URL must be provided
if ! [[ "$romana_root" ]]; then
	usage_error "Romana Root URL must be provided."
fi

valid_bool() {
	if (($# != 1)); then
		internal_error "valid_bool(): expected 1 parameter, got $#"
	fi
	case "$1" in
	true|false)
		;;
	*)
		return 1
		;;
	esac
	return 0
}

# Check NAT option is valid
if [[ "$nat" ]]; then
	if ! valid_bool "$nat"; then
		usage_error "Expected 'true' or 'false' for --nat option. ('$nat')"
	fi
else
	nat=true
fi
# Check pod-to-host is valid
if [[ "$pod_to_host" ]]; then
	if ! valid_bool "$pod_to_host"; then
		usage_error "Expected 'true' or 'false' for --pod-to-host option. ('$pod_to_host')"
	fi
else
	pod_to_host=true
fi

# Generate .romana.yml for romana cli tool
replacements=( -e 's|romana-root|'"$romana_root"'|g' )
sed "${replacements[@]}" /var/lib/romana/templates/dot-romana.template > /root/.romana.yml

# Check that we can reach root service
if ! romana host list &>/dev/null; then
	usage_error "Unable to fetch list of hosts using '$romana_root'"
fi

# Check if this host is already configured
# Note: 'romana host show' returns empty list for this query.
if ! host_info=$(romana host show "$HOSTNAME" -f json 2>/dev/null); then
	internal_error "romana host show command failed."
fi
romana_address=
case "$(jq -r 'length' <<< "$host_info")" in
1)
	# Already exists. Extract Romana address
	romana_address=$(jq -r '.[0].romana_ip // empty' <<< "$host_info")
	if ! [[ "$romana_address" ]]; then
		internal_error "Unable to find romana_ip for '$HOSTNAME'"
	fi
	;;
0)
	internal_error "Host '$HOSTNAME' not registered"
	;;
*)
	internal_error "Bad response for host list for '$HOSTNAME'"
	;;
esac

# Networking functions
interface_address() {
	if (($# != 1)); then
		internal_error "interface_address(): expected 1 parameter, got $#"
		return $?
	fi
	if ! ip link show "$1" &>/dev/null; then
		return 1
	fi
	local found=0 first second
	while read -r first second _; do
		if [[ "$first" = "inet" ]]; then
			found=1
			break
		fi
	done < <(ip addr show "$1")
	if ! ((found)); then
		return 1
	fi
	printf "%s" "$second"
}

valid_number() {
	if (($# != 1)); then
		internal_error "valid_number(): expected 1 parameter, got $#"
	fi
	if ! printf "%d\n" "$1" &> /dev/null; then
		return 1
	fi
	return 0
}

valid_cidr() {
	if (($# != 1)); then
		internal_error "valid_cidr(): expected 1 parameter, got $#"
	fi
	# Split w.x.y.z/p into pieces.
	local w x y z p r v
	IFS='./' read -r w x y z p r <<< "$1"
	if [[ "$r" ]]; then
		# Additional data in the CIDR. Return error.
		return 1
	fi
	# Check w, x, y, z are valid numbers from 0-255.
	error=0
	for v in "$w" "$x" "$y" "$z"; do
		if ! valid_number "$v"; then
			error=1
			break
		fi
		if ! ((v >= 0 && v < 256)); then
			error=1
			break
		fi
	done

	if ((error)); then
		return 1
	fi
	# Check p is some value between 0 and 32.
	if ! valid_number "$p"; then
		return 1
	fi
	if ! ((p >= 0 && p <= 32)); then
		return 1
	fi
	
	# Passed checks. return OK
	return 0
}

# Get the topology config. Used for allocation and/or NAT
topology_path=$(curl -s "$romana_root" | jq -r '.links[] | select(.rel=="topology-config") | .href')
if ! [[ "$topology_path" ]]; then
	internal_error "empty result attempting to resolve topology-config"
fi
topology_config=$(curl -s "${romana_root}${topology_path}")
romana_cidr=$(jq -r '.config.datacenter.cidr // empty' <<< "$topology_config")
if ! valid_cidr "$romana_cidr"; then
	internal_error "invalid result attempting to get cidr configuration for topology"
fi

# Use eth0 as interface name if not provided
if ! [[ "$interface" ]]; then
	interface=eth0
fi
# Use interface as default for nat_interface
if ! [[ "$nat_interface" ]]; then
	nat_interface="$interface"
fi
# Check Cluster IP CIDR is valid
if [[ "$cluster_ip_cidr" ]]; then
	if ! valid_cidr "$cluster_ip_cidr"; then
		usage_error "Expected valid CIDR for --cluster-ip-cidr. ('$cluster_ip_cidr')"
	fi
else
	cluster_ip_cidr="100.64.0.0/12"
fi
# Look up the host's IP address using the interface
host_address=
if ! host_address=$(interface_address "$interface"); then
	usage_error "Unable to find IP address using interface '$interface'. Use --interface to specify a different interface"
fi

# If no address found, allocate one.
if ! [[ "$romana_address" ]]; then
	if ! result=$(allocate_romana_address "$host_address"); then
		internal_error "error allocating romana address: $result"
	fi
	romana_address="$result"
	if ! romana host add "$HOSTNAME" "${host_address%/*}" "$romana_address" 9604; then
		internal_error "unable to register host with topology"
	fi
fi

case "$nat" in
true)
	# Create chain
	if ! iptables -t nat -L ROMANA-MASQ 2>/dev/null; then
		if ! iptables -t nat -N ROMANA-MASQ; then
			internal_error "Error creating chain for NAT rule"
		fi
	fi
	# Flush rules from chain
	if ! iptables -t nat -F ROMANA-MASQ; then
		internal_error "Error flushing chain for NAT rule"
	fi
	# Add items to chain
	if ! iptables -t nat -A ROMANA-MASQ -d "$romana_cidr" -j RETURN; then
		internal_error "Error adding exclusion for $romana_cidr"
	fi
	if ! iptables -t nat -A ROMANA-MASQ -d "$cluster_ip_cidr" -j RETURN; then
		internal_error "Error adding exclusion for $cluster_ip_cidr"
	fi
	if ! iptables -t nat -A ROMANA-MASQ -o "$nat_interface" -j MASQUERADE; then
		internal_error "Error adding NAT for $nat_interface"
	fi
	# Activate chain
	if ! iptables -t nat -C POSTROUTING -s "$romana_address" -j ROMANA-MASQ; then
		if ! iptables -t nat -A POSTROUTING -s "$romana_address" -j ROMANA-MASQ; then
			internal_error "Error adding $romana_address POSTROUTING rule"
		fi
	fi
	;;
false)
	# If chain is active, delete the rule
	if iptables -t nat -C POSTROUTING -s "$romana_address" -j ROMANA-MASQ; then
		if ! iptables -t nat -D POSTROUTING -s "$romana_address" -j ROMANA-MASQ; then
			internal_error "Error removing $romana_address POSTROUTING rule"
		fi
	fi

	# If chain exists, flush and remove it
	if iptables -t nat -L ROMANA-MASQ 2>/dev/null; then
		if ! iptables -t nat -F ROMANA-MASQ; then
			internal_error "Error flushing chain for NAT rule"
		fi
		if ! iptables -t nat -X ROMANA-MASQ; then
			internal_error "Error removing chain for NAT rule"
		fi
	fi
	;;
*)
	internal_error "nat variable was not true or false: '$nat'"
	;;
esac

case "$pod_to_host" in
true)
	if ! result=$(romana policy show permit-all-pod-to-host -f json); then
		internal_error "failed to look up existing policy"
	fi
	if ! (( $(jq -r length <<< "$result" ) )); then
		romana policy add /var/lib/romana/policies/permit-all-pod-to-host.json
	fi
	if ! result=$(romana policy show permit-all-host-to-pod -f json); then
		internal_error "failed to look up existing policy"
	fi
	if ! (( $(jq -r length <<< "$result" ) )); then
		romana policy add /var/lib/romana/policies/permit-all-host-to-pod.json
	fi
	;;
false)
	if ! result=$(romana policy show permit-all-pod-to-host -f json); then
		internal_error "failed to look up existing policy"
	fi
	if (( $(jq -r length <<< "$result" ) )); then
		romana policy remove permit-all-pod-to-host
	fi
	if ! result=$(romana policy show permit-all-host-to-pod -f json); then
		internal_error "failed to look up existing policy"
	fi
	if (( $(jq -r length <<< "$result" ) )); then
		romana policy remove permit-all-host-to-pod
	fi
		;;
*)
	internal_error "pod_to_host variable was not true or false: '$pod_to_host'"
	;;
esac

# Create agent database
printf "Creating database for agent\n"
/usr/local/bin/agent -rootURL "$romana_root" -createSchema
	
# Generate romana-agent.conf for supervisord
replacements=(
	-e 's|<romana-root>|'"$romana_root"'|g'
	-e 's|<interface>|'"$interface"'|g'
)
sed "${replacements[@]}" /var/lib/romana/templates/romana-agent.template > /etc/supervisor/conf.d/romana-agent.conf

# Install CNI
if [[ -d /host/usr/local/bin ]]; then
	cp /usr/local/bin/romana /host/usr/local/bin/romana
fi
if [[ -d /host/opt/cni/bin ]]; then
	replacements=( -e 's|cni-image|'"$cni_image"'|g' )
	sed "${replacements[@]}" /var/lib/romana/cni-installation/romana-cni-wrapper > /host/opt/cni/bin/romana
	chmod --reference=/var/lib/romana/cni-installation/romana-cni-wrapper /host/opt/cni/bin/romana
fi
if [[ -d /host/etc/cni/net.d ]]; then
	replacements=( -e 's|romana-root|'"$romana_root"'|g' )
	sed "${replacements[@]}" /var/lib/romana/cni-installation/10-romana.conf > /host/etc/cni/net.d/10-romana.conf
fi
if [[ -d /host/etc/romana ]]; then
	cp /root/.romana.yml /host/etc/romana/cli.yml
fi

# Run things via supervisord
printf "Launching Romana services via supervisord\n"
exec supervisord
