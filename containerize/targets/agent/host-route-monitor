#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "${0##*/}: dynamically adds host routes for new nodes"
	echo "Options:"
	echo " -h or --help: print usage"
	echo " --romana-root: URL for Romana Root service, eg: http://127.0.0.1:9600"
	echo " --interface: Interface for host routes, instead of eth0"
	echo " --interval: Interval between queries to topology service"
}

# Parse command-line options
usage=0
romana_root=
interface=
interval=
while [[ $1 == -* ]]; do
	# expand --foo=bar options
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--romana-root)
		romana_root="$2"
		shift 2
		;;
	--interface)
		interface="$2"
		shift 2
		;;
	--interval)
		interval="$2"
		shift 2
		;;
	*)
		echo "Unknown option '$1'"
		usage
		exit 1
		;;
	esac
done

usage_error() {
	if (($# < 1)); then
		internal_error "Call to usage_error without a message"
	fi
	echo "Error:" "$@"
	usage
	exit 1
}
	
internal_error() {
	echo "Internal Error:" "$@"
	exit 2
}

# If usage was requested, call usage function
if ((usage)); then
	usage
	exit 0
fi

# Romana Root URL must be provided
if ! [[ "$romana_root" ]]; then
	usage_error "Romana Root URL must be provided."
fi

# Use eth0 as interface name if not provided
if ! [[ "$interface" ]]; then
	interface=eth0
fi

# Use 60 seconds as default interval if not provided
if ! [[ "$interval" ]]; then
	interval=60
fi

valid_number() {
	if (($# != 1)); then
		internal_error "valid_number(): expected 1 parameter, got $#"
	fi
	if ! printf "%d\n" "$1" &> /dev/null; then
		return 1
	fi
	return 0
}

if ! valid_number "$interval"; then
	usage_error "Interval must be a valid number."
fi
if ! (( interval >=5 && interval <= 600)); then
	usage_error "Interval must be betwen 5 and 600 (inclusive)"
fi

interface_address() {
	if (($# != 1)); then
		internal_error "interface_address(): expected 1 parameter, got $#"
	fi
	if ! ip link show "$1" &>/dev/null; then
		return 1
	fi
	local found=0 first second
	while read -r first second _; do
		if [[ "$first" = "inet" ]]; then
			found=1
			break
		fi
	done < <(ip addr show "$1")
	if ! ((found)); then
		return 1
	fi
	printf "%s" "$second"
}

valid_cidr() {
	if (($# != 1)); then
		internal_error "valid_cidr(): expected 1 parameter, got $#"
	fi
	# Split w.x.y.z/p into pieces.
	local w x y z p r v
	IFS='./' read -r w x y z p r <<< "$1"
	if [[ "$r" ]]; then
		# Additional data in the CIDR. Return error.
		return 1
	fi
	# Check w, x, y, z are valid numbers from 0-255.
	error=0
	for v in "$w" "$x" "$y" "$z"; do
		if ! valid_number "$v"; then
			error=1
			break
		fi
		if ! ((v >= 0 && v < 256)); then
			error=1
			break
		fi
	done

	if ((error)); then
		return 1
	fi
	# Check p is some value between 0 and 32.
	if ! valid_number "$p"; then
		return 1
	fi
	if ! ((p >= 0 && p <= 32)); then
		return 1
	fi
	
	# Passed checks. return OK
	return 0
}

cidr_addr() {
	if (($# != 1)); then
		internal_error "cidr_addr(): expected 1 parameter, got $#"
	fi
	if ! valid_cidr "$1"; then
		internal_error "cidr_addr(): '$1' is not a valid CIDR."
	fi
	local a
	IFS='/' read -r a _ <<< "$1"
	printf "%s" "$a"
}


# Look up the host's IP address using the interface
host_address=
if ! host_address=$(interface_address "$interface"); then
	usage_error "Unable to find IP address using interface '$interface'. Use --interface to specify a different interface"
fi
if ! host_ip=$(cidr_addr "$host_address"); then
	internal_error "Unable to get IP address from host address '$host_address'"
fi

# Get the topology config. Used for collecting the list of hosts
topology_path=$(curl -s "$romana_root" | jq -r '.links[] | select(.rel=="topology-config") | .href')
if ! [[ "$topology_path" ]]; then
	internal_error "empty result attempting to resolve topology-config"
fi
topology_config=$(curl -s "${romana_root}${topology_path}")
topology_host=$(jq -r '.common.api.host // empty' <<< "$topology_config")
if ! [[ "$topology_host" ]]; then
	internal_error "failed to get topology host from topology-config"
fi
topology_port=$(jq -r '.common.api.port // empty' <<< "$topology_config")
if ! [[ "$topology_port" ]]; then
	internal_error "failed to get topology port from topology-config"
fi

topology_hosts_url="http://${topology_host}:${topology_port}/hosts"

convert_to_network_addr() {
	if (($# != 1)); then
		internal_error "cidr_to_int(): expected 1 parameter, got $#"
	fi
	if ! valid_cidr "$1"; then
		internal_error "cidr_to_int(): '$1' is not a valid CIDR."
	fi
	local w x y z p v
	IFS='./' read -r w x y z p <<< "$1"
	# convert to integer
	((v=(w<<24) + (x<<16) + (y<<8) + z))
	# remove 1
	((v-=1))
	# convert back to CIDR
	printf "%d.%d.%d.%d/%d" "$(((v>>24)%256))" "$(((v>>16)%256))" "$(((v>>8)%256))" "$((v%256))" "$p"
}

# Main loop
while sleep "$interval"; do
	# Get a list of hosts
	host_list=$(curl -s "$topology_hosts_url")
	num_hosts=$(jq -r 'length' <<< "$host_list")
	# If no result or zero result for num_hosts, try again later.
	if ! [[ "$num_hosts" ]] || ! (( num_hosts )); then
		continue
	fi
	while read -r name ip romana_ip; do
		# Topology stores romana-gw IP + netmask as romana_ip.
		# Need to convert to network_addr
		romana_cidr=$(convert_to_network_addr "$romana_ip")

		if ! [[ $(ip route show "$romana_cidr" via "$ip" dev "$interface") ]]; then
			if result=$(ip route add "$romana_cidr" via "$ip" dev "$interface" 2>&1); then
				echo "Successfully added route for $name"
			else
				echo "Failed to add route for $name: $result"
			fi
		fi
	done < <(jq -r --arg hostIP "$host_ip" '.[] | select(.ip != $hostIP) | "\(.name) \(.ip) \(.romana_ip)"' <<< "$host_list")
done
