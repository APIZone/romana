#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	if (( $# > 0 )); then
		echo '               _     _ '
		echo '__      ____ _| |_  | |'
		echo '\ \ /\ / / _` | __| | |'
		echo ' \ V  V / (_| | |_  |_|'
		echo '  \_/\_/ \__,_|\__| (_)'
		echo
		echo "$@"
		echo
	fi

	echo "allthethings: consistent build for docker containers"
	echo ""
	echo "usage: allthethings [options]"
	echo " -t (or --tag):         container tag"
	echo " -c (or --compile):     compile things. yes or no"
	echo " --github-key:          private key to access github repositories"
	echo " --core-repo:           git@ or https:// address of core repo"
	echo " --core-branch:         git branch/tag/sha of core to build"
	echo " --romana-repo:         git@ or https:// address of romana repo"
	echo " --romana-branch:       git branch/tag/sha of romana to build"
	echo " -b (or --build):       build containers. yes or no"
	echo " -p (or --push):        push containers to namespaces. yes or no"
	echo " -n (or --namespace):   namespace for containers, eg: quay.io/romana/"
}

error() {
	echo
	echo '       _                             _ ' 
	echo '  ___ | |__  _ __   ___   ___  ___  | |'
	echo ' / _ \|  _ \|  _ \ / _ \ / _ \/ __| | |'
	echo '| (_) | | | | | | | (_) |  __/\__ \ |_|'
	echo ' \___/|_| |_|_| |_|\___/ \___||___/ (_)'
	echo
	echo "$@"
	echo
}

fatal() {
	error "$@"
	exit 1
}

log() {
	if (( $# < 2 )); then
		error "log(): insufficient parameters" "$@"
		exit
	fi
	local target=$1 state=$2
	shift 2
	if (( $# > 0 )); then
		printf "%s:%s:%s\n" "$target" "$state" "$(printf " %s" "$@")"
	else
		printf "%s:%s\n" "$target" "$state"
	fi
}


if ! cd "${0%/*}"; then
	error "Error attempting to cd to installation directory."
	exit 1
fi

# Common shopt's
shopt -s nullglob

# Parse command-line options
tag=unspecified
compile=maybe
github_key=
core_repo=https://github.com/romana/core
core_branch=
build=maybe
push=maybe
namespaces=()

acceptable_tag() {
	if (($# != 1)); then
		fatal "acceptable_tag(): expected 1 parameter, got $#"
	fi
	if ! [[ "$1" ]]; then
		echo "tag empty"
		return 1
	fi
	if ((${#1} > 128)); then
		echo "tag too long"
		return 1
	fi
	if [[ "${1:0:1}" != [A-Za-z0-9] ]]; then
		echo "first character must be uppercase/lowercase letter or a digit"
		return 1
	fi
	if [[ "${1//[A-Za-z0-9._-]/}" ]]; then
		echo "tag can only contain uppercase/lowercase letters, digits, underscore, period or dash"
		return 1
	fi
}

yes_no_maybe() {
	if (($# != 1)); then
		fatal "yes_no_maybe(): expected 1 paramter, got $#"
	fi
	case "$1" in 
	yes|no|maybe)
		return 0
		;;
	*)
		return 42
		;;
	esac
}

while [[ $1 == -* ]]; do
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	-t|--tag)
		tag="$2"
		shift 2
		;;
	-c|--compile)
		if ! yes_no_maybe "$2"; then
			usage "$1: $2 is not valid"
			exit 1
		fi
		compile="$2"
		shift 2
		;;
	--github-key)
		if ! [[ -e "$2" ]]; then
			usage "$1: $2 not found"
			exit 1
		fi
		github_key="$(readlink -f "$2")"
		shift 2
		;;
	--core-repo)
		core_repo="$2"
		shift 2
		;;
	--core-branch)
		core_branch="$2"
		shift 2
		;;
	-b|--build)
		if ! yes_no_maybe "$2"; then
			usage "$1: $2 is not valid"
			exit 1
		fi
		build="$2"
		shift 2
		;;
	-p|--push)
		if ! yes_no_maybe "$2"; then
			usage "$1: $2 is not valid"
			exit 1
		fi
		push="$2"
		shift 2
		;;
	-n|--namespace)
		if ! [[ $2 ]]; then
			usage "$1: '$2' is not valid"
			exit 1
		fi
		namespaces+=( "$2" )
		shift 2
		;;
	*)
		usage "Unrecognized option '$1'"
		exit 1
		;;
esac; done

# Compile allthethings
compile() {
	case "$compile" in
		yes)
			;;
		no)
			log compile skipping
			return
			;;
		maybe)
			if [[ -d "volumes/romana_bin_dir_$tag" ]]; then
				local files=( "volumes/romana_bin_dir_$tag"/* )
				if (( ${#files[@]} > 0 )); then
					# skip, already compiled
					log compile skipping
					return
				fi
			fi
			compile=yes
			;;
	esac

	log compile start building container for compiling
	if ! docker build -t romana/compile targets/compile; then
		fatal error building compile container
	fi
	log compile ... creating volume paths
	volume_paths=(
		"$PWD/volumes/romana_bin_dir_$tag"
		"$PWD/volumes/romana_pkg_dir_$tag"
		"$PWD/volumes/romana_src_dir_$tag"
	)
	for p in "${volume_paths[@]}"; do
		if ! [[ -d "$p" ]]; then
			if ! mkdir "$p"; then
				fatal error creating volume path "$p"
			fi
		fi
	done
	log compile ... running compile stage
	docker_flags=(
		--rm
	)
	volume_flags=(
		-v "$PWD/volumes/romana_bin_dir_$tag":/go/bin
		-v "$PWD/volumes/romana_pkg_dir_$tag":/go/pkg
		-v "$PWD/volumes/romana_src_dir_$tag":/go/src/github.com/romana/core
		-v "$PWD/targets/compile/src":/go/src
	)
	compile_flags=(
		--core-repo="$core_repo"
	)
	if [[ "$core_branch" ]]; then
		compile_flags+=(
			--core-branch="$core_branch"
		)
	fi
	if [[ "$github_key" ]]; then
		docker_flags+=(
			--user "$UID"
		)
		volume_flags+=(
	       		-v /etc/passwd:/etc/passwd
			-v "$github_key":/github_id_rsa
		)
		compile_flags+=(
			--github-key=/github_id_rsa
			--race
		)
	fi
	if ! docker run "${docker_flags[@]}" "${volume_flags[@]}" romana/compile "${compile_flags[@]}"; then
		fatal error running compile container
	elif [[ "$build" = maybe ]]; then
		build=yes
	fi
	log compile end
}

build() {
	case "$build" in
	yes)
		return 0
		;;
	no)
		return 42
		;;
	maybe)
		for n in "${namespaces[@]}"; do
			for i in daemon listener agent aws; do
				if ! image_name=$(image_name "$n" "$i"); then
					fatal "build(): error from image_name()"
				fi
				if [[ $(docker images --format '{{ .Repository }}:{{ .Tag }}' "$image_name") != "$image_name" ]]; then
					build=yes
					return 0
				fi
			done
		done
		build=no
		return 42
	esac
}

# Copy allthethings to allthecontainers
copy() {
	if ! build; then
		log copy skipping
		return
	fi
	log copy start
	# Download / cache kubectl
	kubectl_version="v1.7.2"
	kubectl_sha256=( dd0235f78b7019ee50400e705c7c2920ecb072252b6699683e84520cb5410073 e0806c9fd584771e74df2bbffb3d07f34b429606056ca47de396ef063dc8ef71 )
	kubectl_url="https://storage.googleapis.com/kubernetes-release/release/$kubectl_version/bin/linux/amd64/kubectl"
	kubectl_filepath="$PWD/volumes/romana_bin_dir_$tag/kubectl"
	if ! wget --continue --output-document="$kubectl_filepath" "$kubectl_url"; then
		fatal error downloading kubectl
	fi
	read -r shasum _ < <(shasum -a 256 "$kubectl_filepath")
	matched=0
	for sha in "${kubectl_sha256[@]}"; do
		if [[ "$shasum" = "$sha" ]]; then
			matched=1
			break
		fi
	done
	if ! (( matched )); then
		fatal error matching checksum for kubectl: "$shasum" differs from "${kubectl_sha256[@]}"
	fi
	chmod +x "$kubectl_filepath"

	# Download / cache etcd
	etcd_version="v3.0.17"
	etcd_sha256="274c46a7f8d26f7ae99d6880610f54933cbcf7f3beafa19236c52eb5df8c7a0b"
	etcd_url="https://github.com/coreos/etcd/releases/download/${etcd_version}/etcd-${etcd_version}-linux-amd64.tar.gz"
	etcd_filepath="$PWD/volumes/romana_bin_dir_$tag/etcd-${etcd_version}-linux-amd64.tar.gz"
	if ! wget --continue --output-document="$etcd_filepath" "$etcd_url"; then
		fatal error downloading etcd
	fi
	read -r shasum _ < <(shasum -a 256 "$etcd_filepath")
	if [[ "$shasum" != "$etcd_sha256" ]]; then
		fatal error matching checksum for etcd: "$shasum" differs from "$etcd_sha256"
	fi
	if ! tar --directory="$PWD/volumes/romana_bin_dir_$tag" --strip-components=1 -zxvf "$etcd_filepath" "etcd-${etcd_version}-linux-amd64/etcdctl"; then
		fatal error extracting etcdctl from "$etcd_filepath"
	fi

	log copy ... copying required files for daemon target
	for f in romanad etcdctl; do
		if ! cp -p "$PWD/volumes/romana_bin_dir_$tag/$f" "targets/daemon/$f"; then
			fatal error copying "$f"
		fi
	done
	log copy ... copying required files for listener target
	for f in romana_listener kubectl etcdctl; do
		if ! cp -p "$PWD/volumes/romana_bin_dir_$tag/$f" "targets/listener/$f"; then
			fatal error copying "$f"
		fi
	done
	log copy ... copying required files for agent target
	for f in romana_agent romana_cni romana kubectl etcdctl; do
		if ! cp -p "$PWD/volumes/romana_bin_dir_$tag/$f" "targets/agent/$f"; then
			fatal error copying "$f"
		fi
	done
	log copy ... copying required files for aws target
	for f in romana_aws; do
		if ! cp -p "$PWD/volumes/romana_bin_dir_$tag/$f" "targets/aws/$f"; then
			fatal error copying "$f"
		fi
	done
	log copy ... copying required files for x-route-publisher target
	for f in romana_route_publisher etcdctl; do
		if ! cp -p "$PWD/volumes/romana_bin_dir_$tag/$f" "targets/x-route-publisher/$f"; then
			fatal error copying "$f"
		fi
	done
	log copy end
}

image_name() {
	if (($# != 2)); then
		fatal "image_name(): expected 2 parameter, got $#"
	fi
	local n="$1" c="$2" name
	case "${n: -1}" in
	[-/])
		name="$n$c:$tag"
		;;
	*)
		name="$n/$c:$tag"
		;;
	esac
	printf "%s" "$name"
}

docker_build() {
	if (($# != 2)); then
		fatal "build_flags(): expected 2 parameter, got $#"
	fi
	local c="$1" p="$2" flags=()
	for n in "${namespaces[@]}"; do
		if ! image_name=$(image_name "$n" "$c"); then
			fatal "build_flags: error from image_name"
		fi
		flags+=( -t "$image_name" )
	done
	docker build "${flags[@]}" "$p"
}

# Build container
build_container() {
	if (($# != 1)); then
		fatal "build_container(): expected 1 parameter, got $#"
	fi
	local c
	c="$1"
	if ! build; then
		log "container-$c" skipping
		return
	fi
	log "container-$c" start building container for romana "$c" components
	if ! docker_build "$c" targets/"$c"; then
		fatal error building "$c" container
	fi
	log "container-$c" end
}

registry() {
	if (($# != 1)); then
		fatal "registry(): expected 1 parameter, got $#"
	fi
	local n="$1"
	IFS=/ read -r prefix _ <<< "$n"
	if [[ "$prefix" == *.* ]] || [[ "$prefix" == *:* ]]; then
		registry="$prefix"
	else
		registry="https://index.docker.io/v1/"
	fi
	printf "%s" "$registry"
}

login_not_required() {
	if (($# != 1)); then
		fatal "login_not_required(): expected 1 parameter, got $#"
	fi
	local n="$1"
	IFS=/ read -r prefix _ <<< "$n"
	if [[ "$prefix" == *:* ]]; then
		# Assume login not required for registries specifying ports
		return 0
	fi
	return 1
}

push() {
	case "$push" in
	yes)
		;;
	no)
		log push skipping
		return
		;;
	maybe)
		if ! build; then
			log push skipping
			return
		fi
		;;
	esac
	if ! (( ${#namespaces[@]} )); then
		log push skipping no targets available
		return
	fi

	for n in "${namespaces[@]}"; do
		if ! registry=$(registry "$n"); then
			log push error getting registry for "$n"
			continue
		fi

		log push start pushing containers to "$registry"
		logged_in=0
		# shellcheck disable=SC2016
		if [[ -f ~/.docker/config.json ]] && [[ "$(jq -r --arg registry "$registry" '.auths[$registry].auth // empty' < ~/.docker/config.json)" ]]; then
			log push ... already logged in
			logged_in=1
		fi
		if login_not_required "$registry"; then
			log push ... login not required
			logged_in=1
		fi
		if ! ((logged_in)); then
			if ! docker login "$registry"; then
				fatal error logging into "$registry"
			fi
		fi
		for i in daemon listener agent aws x-route-publisher x-bird; do
			log push ... pushing "$i"
			if ! docker push "$(image_name "$n" "$i")"; then
				fatal error pushing "$i" to "$registry"
			fi
			log push ... "$i" pushed
		done
		log push end pushing containers to "$registry"
	done
	log push end
}

# Script body
compile
copy
build_container daemon
build_container listener
build_container agent
build_container aws
build_container x-route-publisher
build_container x-bird
push
