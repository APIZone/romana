#!/bin/bash
# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Romana CNI plugin for kubernetes.

# This plugin integrated with Romana IPAM and will not honour k8s IPAM config.
# It is a pure demo designed to demonstrate romana networking with kubernetes
# TODO plugin need to be redesigned to take in account segments and possibly 
# other romana tags, romana url and ports should be taken from configuration
# communication with kubernetes might be better off via API.

# DEPENDENCIES
# nsenter
# kubectl
# curl

exec 2>>/tmp/romana-cni.err

log () {
	echo "$*" >> /tmp/romana-cni.log
}

log_env () {
	env >> /tmp/romana-cni.log
}

get_pod () { while read line; do [[ ${line/=*/} == "K8S_POD_NAME" ]] && echo ${line/*=/}; done; }
get_tenant () { while read line; do [[ ${line/=*/} == "tenant" ]] && echo ${line/*=/}; done; }
get_labels () { awk '/Labels/ { print $2}' | xargs -d"," -n1 ; } 
get_json_kv () { sed 's/["{}]//g' | xargs -d "," -n1; }
get_ip () { while read line; do [[ ${line/:*/} == "ip" ]] && echo ${line/*:/}; done; }
get_nspid () { echo $1 | awk -F"/" '{ print $3 }'; }
get_args () { echo $CNI_ARGS | xargs -d";" -n1 ;}


KUBECTL=kubectl
KUBEARGS=" -s __MASTER_IP__:8080"
GATE_SRC="__GATE_SRC__"


log "Romana CNI plugin"
log "$*"
log_env

result () {
	printf '{ "cniVersion": "0.1.0", "ip4": { "ip": "%s/16" } }' $1
}

req () {
	# TODO currently romana agent expects valid mac address on k8s endpoint even though it not needed there
	printf '{ "interface_name": "%s", "mac_address": "de:ad:be:ef:00:00", "ip_address" : "%s"  }' $1 $2
}

# We only care for ADD call right now because on DEL most of configuration will be gone
# as soon as docker terminates the containers.
if [[ $CNI_COMMAND == "ADD" ]]; then
	log "--- ADD --"
	NSPID=$(get_nspid "$CNI_NETNS")
	log "--- nspid = $NSPID ---"

	POD=$(get_args | get_pod)
	TENANT=$( $KUBECTL $KUBEARGS describe pod $POD | get_labels | get_tenant )
	NODE=$( $KUBECTL $KUBEARGS get pods -o wide | grep "$POD " | awk '{ print $6 }' )

	# Asking romana ipam for an IP address, based on `tenant` label.
	# CNI expects us to read ipam config from stdin, but for demo config is static anyway. # TODO read config from stdin
	IP=$(curl -s "http://__MASTER_IP__:9601/allocateIpByName?tenantName=${TENANT}&segmentName=default&hostName=${NODE}&instanceId=0" | get_json_kv | get_ip)
	log "calling IPAM  curl -s http://__MASTER_IP__:9601/allocateIpByName?tenantName=${TENANT}&segmentName=default&hostName=${NODE}&instanceId=0"
	log "IP=$IP"

	# TODO don't proceed if we haven't got an IP above

	# Setting up the networking for Infra namespace
	sudo ip link add type veth
	sudo ip link set veth0 name "veth0-${NSPID}"
	sudo ip link set veth1 name "veth1-${NSPID}"
	sudo ip link set "veth1-${NSPID}" netns ${NSPID}
	sudo nsenter -t ${NSPID} -n ip link set "veth1-${NSPID}" name eth0
	sudo nsenter -t ${NSPID} -n ip link set eth0 up
	sudo nsenter -t ${NSPID} -n ip addr add $IP/16 dev eth0
	sudo nsenter -t ${NSPID} -n ip ro add 0.0.0.0/0 dev eth0
	sudo ip link set "veth0-${NSPID}" up

#	sudo ip ro add ${IP}/32 dev veth0-${NSPID} src $GATE_SRC  # romana agent supposed to do this

	# Romana agent does the rest (endpoint route and firewall)
	curl -s -H 'content-type: application/json' -XPOST -d "$(req "veth0-${NSPID}" "$IP")" http://localhost:9604/kubernetes-pod-up 2>&1 >> /tmp/romana-cni.log


	log "$(req "veth0-${NSPID}" "$IP")"
	log "--- Setup with infra pod = $POD pid = $PID, PEERIFx = $PEERIFx, PEERIFn=$PEERIFn, TENANT=$TENANT, NODE=$NODE, IP=$IP"
	R=$(result "$IP")
	log "$R"

	# Kubernetes expects valid json on output so no one above should echo anything in stdout
	echo -n $R
fi

log "Romana CNI plugin done"
