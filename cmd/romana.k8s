#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# Usage subcommand.
usage() {
	echo "romana: command-line tool for Romana administration"
	echo "Usage: romana <subcommmand> [options]"
	echo "       romana <subcommmand> help"
	echo "       romana [help]"
	echo "Subcommands:"
	echo "    add-host"
	echo "    remove-host"
	echo "    show-host"
	echo "    create-owner"
	echo "    delete-owner"
	echo "    show-owner"
	echo "    add-tier"
	echo "    remove-tier"
}

# Variables used within the script
tenant_url=http://{{ stack_nodes.Controller.mgmt_ip }}:9602/
tenant_path="tenants"
topology_url=http://{{ stack_nodes.Controller.mgmt_ip }}:9603/
topology_path="hosts"

add_host() {
	if (( $# == 0 )) || [[ "$1" == "help" ]]; then
		echo "romana add-host <hostname> <host-ip> <romana-cidr> <agent-port>"
		return
	fi
	if (( $# != 4 )); then
		echo "ERROR: expected 4 parameters, received $#"
		return
	fi
	local hostname="$1" host_ip="$2" romana_cidr="$3" agent_port="$4"
	# TODO: add validation for the parameters
	post_data=$(printf '{"name": "%s", "ip": "%s", "romana_ip": "%s", "agent_port": %s}' "$hostname" "$host_ip" "$romana_cidr" "$agent_port")
	echo "Sending request to '${topology_url}${topology_path}': '$post_data'"
	curl -s -X POST -H "Content-Type: application/json" --data "$post_data" "${topology_url}${topology_path}"; printf "\n"
}

show_host() {
	# Without arguments, show all the hosts
	if (( $# == 0 )); then
		show_hosts
		return
	fi
	# Show usage.
	# TODO: What if the host's name is 'help' ?
	if [[ "$1" == "help" ]]; then
		echo "romana show-host [hostname...]"
		return
	fi

	# Get the list of hosts, save the data
	if ! response=$(curl -s -f -H "Content-Type: application/json" "${topology_url}${topology_path}"); then
		echo "Unable to fetch hosts using URL '${topology_url}${topology_path}'"
		return
	fi

	# For each hostname...
	for i in "$@"; do
		# Check that the host is in the list
		len=$(jq -r --arg host "$i" '.[] | select(.name==$host) | length' <<< "$response")
		if (( len == 0 )); then
			echo "Unable to find host '$i'"
			continue
		fi
		read -r hostname host_ip romana_cidr agent_port _ < <(jq -r --arg host "$i" '.[] | select(.name==$host) | "\(.name) \(.ip) \(.romana_ip) \(.agent_port)"' <<< "$response")
		printf "%-20s %15s %18s %5d\n" "$hostname" "$host_ip" "$romana_cidr" "$agent_port"
	done
}

show_hosts() {
	# Get the list of hosts
	if ! response=$(curl -s -f -H "Content-Type: application/json" "${topology_url}${topology_path}"); then
		echo "Unable to fetch hosts using URL '${topology_url}${topology_path}'"
		return
	fi

	# Determine the number of hosts
	num_hosts=$(jq 'length' <<< "$response")
	if (( num_hosts == 0 )); then
		echo "No hosts found."
		return
	fi
	# List the hosts
	printf "Listing %d host(s)\n" "$num_hosts"
	while read -r host _; do
		printf "%s\n" "$host"
	done < <(jq -r '.[].name' <<< "$response")
}

create_owner() {
	if (( $# == 0 )) || [[ "$1" == "help" ]]; then
		echo "romana create-owner <name>"
		return
	fi
	if (( $# != 1 )); then
		echo "ERROR: expected 1 parameters, received $#"
		return
	fi
	local owner_name="$1"
	post_data=$(printf '{"id": 0, "name": "%s"}' "$owner_name")
	echo "Sending request to '${tenant_url}${tenant_path}': '$post_data'"
	curl -s -X POST -H "Content-Type: application/json" --data "$post_data" "${tenant_url}${tenant_path}"; printf "\n"
}

show_owner() {
	# Without arguments, show all the owners
	if (( $# == 0 )); then
		show_owners
		return
	fi

	# Show usage.
	# TODO: What if the owner's name is 'help' ?
	if [[ "$1" == "help" ]]; then
		echo "romana show-owner [owner-name...]"
		return
	fi

	# Get a list of all the owners, save the data
	if ! response=$(curl -s -f -H "Content-Type: application/json" "${tenant_url}${tenant_path}"); then
		echo "Unable to fetch owners using URL '${tenant_url}${tenant_path}'"
		return
	fi

	# For each owner name...
	for i in "$@"; do
		# Find the owner with that name
		len=$(jq -r --arg name "$i" '.[] | select(.Name==$name) | length' <<< "$response")
		if (( len == 0 )); then
			echo "Unable to find tenant '$project' ($i)"
			continue
		fi

		read -r id _ < <(jq -r --arg name "$i" '.[] | select(.Name==$name) | "\(.Id)"' <<< "$response")

		# Get the list of tiers
		if ! tier_list=$(curl -s -f -H "Content-Type: application/json" "${tenant_url}${tenant_path}/${id}/segments"); then
			echo "Unable to list tiers for owner '$i'"
			continue
		fi

		# Write the data
		printf "owner:%-32s\n" "$i"
		printf "tiers: "
		sep=""
		while read -r tier_name _; do
			printf "%s%s" "$sep" "$tier_name"
			sep=", "
		done < <(jq -r '.[].Name' <<< "$tier_list")
		printf "\n"
	done
}

show_owners() {
	# Get the list of owners
	if ! response=$(curl -s -f -H "Content-Type: application/json" "${tenant_url}${tenant_path}"); then
		echo "Unable to fetch owners using URL '${tenant_url}${tenant_path}'"
		return
	fi
	# Determine the number of owners
	num_owners=$(jq 'length' <<< "$response")
	if (( num_owners == 0 )); then
		echo "No owners found."
		return
	fi
	# List the owners
	printf "Listing %d owner(s)\n" "$num_owners"
	while read -r owner _; do
		printf "%-32s\n" "$owner"
	done < <(jq -r '.[].Name' <<< "$response")
}

add_tier() {
	if (( $# == 0 )) || [[ "$1" == "help" ]]; then
		echo "romana add-tier <owner-name> <segment-name>"
		return
	fi
	if (( $# != 2 )); then
		echo "ERROR: expected 2 parameters, received $#"
		return
	fi
	local owner_name="$1" tier_name="$2"
	if ! response=$(curl -s -f -H "Content-Type: application/json" "${tenant_url}${tenant_path}"); then
		echo "Unable to fetch owners using URL '${tenant_url}${tenant_path}'"
		return
	fi
	read -r owner_id _ < <(jq -r --arg name "$owner_name" '.[] | select(.Name==$name) | "\(.Id)"' <<< "$response")

	if ! [[ "$owner_id" ]]; then
		echo "Unable to find owner id using owner ref '$owner_name'"
		return
	fi

	post_data=$(printf '{"id": 0, "name": "%s"}' "$tier_name")
	tier_path="$tenant_path/$owner_id/segments"
	echo "Sending request to '${tenant_url}${tier_path}': '$post_data'"
	curl -s -X POST -H "Content-Type: application/json" --data "$post_data" "${tenant_url}${tier_path}"; printf "\n"
}

# Show usage if no subcommand was provided
if (( $# == 0 )); then
	usage
	exit 9
fi

# Undocumented options to set topology and owner URLs
while [[ "$1" = -* ]]; do
	case "$1" in
		--owner-url)
			tenant_url="$2"
			shift 2
			;;
		--owner-url=*)
			tenant_url="${1:13}"
			shift
			;;
		--topology-url)
			topology_url="$2"
			shift 2
			;;
		--topology-url=*)
			topology_url="${1:15}"
			shift
			;;
		*)
			# Silently ignore unrecognized parameter
			shift
			;;
	esac
done


# Dispatch to subcommand
case "$1" in
	add-host)
		shift
		add_host "$@"
		;;
	remove-host)
		echo "$1: Not implemented yet"
		;;
	show-host)
		shift
		show_host "$@"
		;;
	show-hosts)
		show_hosts
		;;
	create-owner)
		shift
		create_owner "$@"
		;;
	delete-owner)
		echo "$1: Not implemented yet"
		;;
	show-owner)
		shift
		show_owner "$@"
		;;
	show-owners)
		show_owners
		;;
	add-tier)
		shift
		add_tier "$@"
		;;
	remove-tier)
		echo "$1: Not implemented yet"
		;;
	help)
		usage
		;;
	*)
		echo "Unknown subcommand '$1'"
		usage
		exit 1
		;;
esac
