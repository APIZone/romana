{#

Copyright (c) 2016 Pani Networks
All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.

#}
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Romana Install ({{ stack_type }}) - Small Cluster",
  "Resources": {
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "{{ host_cidr }}",
        "MapPublicIpOnLaunch": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-private-subnet"
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-ig"
          }
        ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "{{ host_cidr }}",
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-vpc"
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Controller": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "ControllerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "RestrictedProfile"
        },
        "ImageId": {
          "Ref": "ControllerAMI"
        },
{% if ec2_keypair != "" %}
	"KeyName": "{{ ec2_keypair }}",
{% endif %}
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "nic0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-controller"
          },
          {
            "Key": "StackRole",
            "Value": "Controller"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash", "\n",
{% for cmd in distro_info[distro].bootstrap %}
                {{ cmd | to_json }}, "\n",
{% endfor %}
                ""
              ]
            ]
          }
        }
      }
    },
{% for _ in range(compute_nodes) %}
    "Compute{{ '%02d' | format(loop.index) }}": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "ComputeInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "RestrictedProfile"
        },
        "ImageId": {
          "Ref": "ComputeAMI"
        },
{% if ec2_keypair != "" %}
	"KeyName": "{{ ec2_keypair }}",
{% endif %}
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "nic{{ loop.index }}"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-compute{{ '%02d' | format(loop.index) }}"
          },
          {
            "Key": "StackRole",
            "Value": "Compute"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash", "\n",
{% for cmd in distro_info[distro].bootstrap %}
                {{ cmd | to_json }}, "\n",
{% endfor %}
                ""
              ]
            ]
          }
        }
      }
    },
{% endfor %}
    "CommonIncomingRules": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow ICMP, SSH (Port 22)",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "{{ host_cidr }}"
          },
          {
            "IpProtocol": "-1",
            "CidrIp": "{{ romana_cidr }}"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22",
            "IpProtocol": "tcp"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-sg-common"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ControllerIncomingRules": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP (Port 80)",
        "SecurityGroupIngress": [
	  {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "ToPort": 80,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "6080",
            "ToPort": "6080",
            "IpProtocol": "tcp"
          }
	],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-sg-http"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "NetworkACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-nw-acl"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "InboundACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "NetworkAclId": {
          "Ref": "NetworkACL"
        }
      }
    },
    "OutboundACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "NetworkAclId": {
          "Ref": "NetworkACL"
        }
      }
    },
    "PrivateSubnetACL": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }
    },
    "nic0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "PrivateIpAddress": "{{ host_cidr | ipaddr(10) | ipaddr('address') }}",
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "ControllerIncomingRules"
          },
          {
            "Ref": "CommonIncomingRules"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-nic0"
          }
        ]
      }
    },
{% for _ in range(compute_nodes) %}
    "nic{{ loop.index }}": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "PrivateIpAddress": "{{ host_cidr | ipaddr(10 + loop.index) | ipaddr('address') }}",
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "CommonIncomingRules"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-nic{{ loop.index }}"
          }
        ]
      }
    },
{% endfor %}
    "InternetRoute": {
      "DependsOn": "InternetGatewayAttachment",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RoutingTable"
        }
      }
    },
    "RoutingTableForPrivateSubnet": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RoutingTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RoutingTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "{{ stack_name }}-routes"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "LimitedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "RolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "limited_access_to_s3_buckets",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::romana-binaries"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:DeleteObject",
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Resource": [
                "arn:aws:s3:::romana-binaries/*"
              ]
            },
            {
              "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:GetHostedZone",
                "route53:ListResourceRecordSets"
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:route53:::hostedzone/Z3CT83X5Z3DBU6"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LimitedRole"
          }
        ]
      }
    },
    "RestrictedProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LimitedRole"
          }
        ]
      }
    }
  },
  "Parameters": {
    "ControllerInstanceType": {
      "Description": "EC2 instance type for Controller Node",
      "Type": "String"
    },
    "ControllerAMI": {
      "Description": "AMI to use on Controller Node",
      "Type": "String"
    },
    "ComputeInstanceType": {
      "Description": "EC2 instance type for Compute Nodes",
      "Type": "String"
    },
    "ComputeAMI": {
      "Description": "AMI to use on Compute Nodes",
      "Type": "String"
    }
  }
}
