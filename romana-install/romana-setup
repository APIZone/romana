#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo ""
	echo "romana-setup: executes the ansible playbooks for installing romana"
	echo "Usage: romana-setup [-n stackname] [-p platform ] [-s stacktype] [action]"
	echo "       romana-setup [-n stackname] [-p platform ] [-s stacktype] <action> [ansible-options]"
	echo "       romana-setup <h|--help>"
	echo ""
	echo "Stack Name:  used-defined stack name (default: $USER)"
	echo "Platforms:   aws (default), vagrant"
	echo "Stack Types: devstack (default)"
	echo "Actions:     install (default), uninstall"
	echo ""
	echo "Example: ./romana-setup install -e stack_name=xyzdemo"
	echo "Example: ./romana-setup uninstall -e stack_name=xyzdemo"
	echo "Example: ./romana-setup install -e stack_name=xyzdemo \\"
	echo "           -e instance_type=t2.medium \\"
	echo "           -e romana_core_branch=master \\"
	echo "           -e romana_networking_branch=stable/liberty"
	echo ""
}

# Change to romana-setup directory
if ! cd "${0%/*}"; then
	echo "Error attempting to cd to installation directory."
	exit 1
fi

# Default / initial values
stack_name="$USER"
platform="aws"
stack_type="devstack"
required=( ansible-playbook )

# Process command-line options
if (( $# > 0 )); then 
	while [[ $1 == -* ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
				;;
			-n|--name)
				case "$2" in
					[a-zA-Z][a-zA-Z0-9]*)
						stack_name="$2"
						shift 2
						;;
					*)
						echo "Invalid stack name: '$2' (must start with a letter, and contain only letters and digits)"
						exit 1
						;;
				esac
				;;
			-p|--platform)
				case "$2" in
					aws)
						platform="aws"
						required+=( "aws" )
						shift 2
						;;
					vagrant)
						platform="$2"
						required+=( "vagrant" )
						shift 2
						;;
					*)
						echo "Unknown platform '$2'."
						usage
						exit 1
						;;
				esac
				;;
			-s|--stack)
				case "$2" in
					devstack)
						stack_type="devstack"
						shift 2
						;;
					openstack)
						stack_type="openstack"
						shift 2
						;;
					kubernetes|k8s)
						stack_type="kubernetes"
						shift 2
						;;
					*)
						echo "Unknown stack type '$2'."
						usage
						exit 1
						;;
				esac
				;;
			*)
				echo "Unrecognized option '$1'"
				usage
				exit 1
				;;
		esac
	done
fi

# Process action
action=install
if (( $# > 0 )); then
	case "$1" in
		install|uninstall)
			action="$1"
			shift
			;;
		*)
			echo "Unknown action '$1' for platform '$platform'."
			usage
			exit 1
	esac
fi

# Check if required commands are installed.
for i in "${required[@]}"; do
	if ! command -v "$i" > /dev/null; then
		echo "Required command '$i' not found. Please check your installation."
		exit 1
	fi
done

stack_data_dir="stacks/${stack_name}_${platform}_${stack_type}"
mkdir -p "${stack_data_dir}"

ansible_args=( -e stack_name="$stack_name" -e platform="$platform" -e stack_type="$stack_type" -e stack_data_dir="$stack_data_dir" )

case "$platform" in
	aws|vagrant)
		case "$action" in
			install)
				ansible-playbook "$@" "${ansible_args[@]}" -i localhost create_hosts.yml  || exit 1
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" post-create.yml &&
				hosts_ready=0
				for ((i=0; i < 5; i++)); do
					echo "Attempting to connect to hosts"
					if ansible -i "${stack_data_dir}/inventory" stack_nodes -m ping; then
						hosts_ready=1
						break
					fi
					echo "Retrying in 10 seconds."
					sleep 10
					
				done
				if (( ! hosts_ready )); then
					echo "Unable to reach host(s). Exiting"
					exit 1
				fi
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" config.yml
				[[ -f "${stack_data_dir}/stackinfo" ]] && cat "${stack_data_dir}/stackinfo"
				;;
			uninstall)
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" pre-delete.yml
				ansible-playbook "$@" "${ansible_args[@]}" -i localhost delete_hosts.yml
				;;
			*)
				echo "Unknown action '$action' for platform '$platform'"
				exit 1
				;;
		esac
		;;
	*)
		echo "Unknown platform '$platform'"
		exit 1
		;;
esac
