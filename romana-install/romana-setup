#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

usage() {
	echo "romana-setup: executes the ansible playbooks for installing romana"
	echo "Usage: romana-setup [-n name] [-p platform] [-d distro] [-s stacktype] [-c number] [action]"
	echo "       romana-setup [-n name] [-p platform] [-d distro] [-s stacktype] [-c number] <action> [ansible-options]"
	echo "       romana-setup <h|--help>"
	echo ""
	echo "Cluster Name:  user-defined stack name (default: $USER)"
	echo "Platforms:     aws (default), vagrant, static"
	echo "Distro:        ubuntu (default), centos"
	echo "Stack Types:   devstack (default), openstack, kubernetes"
	echo "Number:        number of cluster nodes"
	echo "Actions:       install (default), uninstall, test"
	echo ""
	echo "Example 1: Romana with Kubernetes on AWS"
	echo "./romana-setup -p aws -s kubernetes install"
	echo "./romana-setup -p aws -s kubernetes test"
	echo "./romana-setup -p aws -s kubernetes uninstall"
	echo "Example 2: Additional AWS cluster, using a different name"
	echo "./romana-setup -n xyz -p aws -s kubernetes install"
	echo "./romana-setup -n xyz -p aws -s kubernetes test"
	echo "./romana-setup -n xyz -p aws -s kubernetes uninstall"
	echo "Example 3: Romana with Devstack on Vagrant"
	echo "./romana-setup -p vagrant -s devstack install"
	echo "./romana-setup -p vagrant -s devstack uninstall"
	echo ""
}

# Change to romana-setup directory
if ! cd "${0%/*}"; then
	echo "Error attempting to cd to installation directory."
	exit 1
fi

# Default / initial values
stack_name="$USER"
distro="ubuntu"
platform="aws"
inventory=""
stack_type="devstack"
cluster_nodes=""
required=( ansible ansible-playbook )

core_source=
core_branch=
networking_branch=
kube_branch=
github_key=
github_user=
github_repo=

# Process command-line options
if (( $# > 0 )); then 
	while [[ $1 == -* ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
				;;
			-n|--name)
				stack_name="$2"
				shift 2
				;;
			-d|--distro)
				case "$2" in
					ubuntu|centos)
						distro="$2"
						shift 2
						;;
					*)
						echo "Invalid distro: '$2'"
						exit 1
						;;
				esac
				;;
			-i|--inventory)
				inventory="$2"
				shift 2
				;;
			-p|--platform)
				case "$2" in
					aws)
						platform="aws"
						required+=( "aws" )
						shift 2
						;;
					vagrant)
						platform="vagrant"
						required+=( "vagrant" )
						shift 2
						;;
					static)
						platform="static"
						shift 2
						;;
					*)
						echo "Unknown platform '$2'."
						usage
						exit 1
						;;
				esac
				;;
			-s|--stack)
				case "$2" in
					devstack)
						stack_type="devstack"
						shift 2
						;;
					openstack)
						stack_type="openstack"
						shift 2
						;;
					kubernetes|k8s)
						stack_type="kubernetes"
						shift 2
						;;
					*)
						echo "Unknown stack type '$2'."
						usage
						exit 1
						;;
				esac
				;;
			-c|--cluster-nodes)
				cluster_nodes="$2"
				shift 2
				;;
# Options for core developers. Not for general users, so excluded from usage/documentation
			--source)
				core_source="github"
				shift
				;;
			--core-branch)
			        core_source="github"
				core_branch="$2"
				shift 2
				;;
			--networking-branch)
				networking_branch="$2"
				shift 2
				;;
			--kube-branch)
				kube_branch="$2"
				shift 2
				;;
			--github-key)
				github_key="$2"
				shift 2
				;;
			--github-user)
				github_user="$2"
				shift 2
				;;
			--github-repo)
				github_repo="$2"
				shift 2
				;;
			*)
				echo "Unrecognized option '$1'"
				usage
				exit 1
				;;
		esac
	done
fi

# Process action
action=install
if (( $# > 0 )); then
	case "$1" in
		install|uninstall|test)
			action="$1"
			shift
			;;
		*)
			echo "Unknown action '$1' for platform '$platform'."
			usage
			exit 1
	esac
fi

# Check if required commands are installed.
for i in "${required[@]}"; do
	if ! command -v "$i" > /dev/null; then
		echo "Required command '$i' not found. Please check your installation."
		exit 1
	fi
done

# Validate the options / combinations
# stack name is valid:
case "$stack_name" in
	[a-zA-Z][a-zA-Z0-9]*)
		# OK
		;;
	*)
		echo "Invalid stack name: '$stack_name' (must start with a letter, and contain only letters and digits)"
		exit 1
		;;
esac
# static hosts, inventory must be set
if [[ $platform = "static" ]]; then
	if ! [[ "$inventory" ]]; then
		echo "Inventory must be provided when using static infrastructure."
		exit 1
	fi
	if ! [[ -e "$inventory" ]]; then
		echo "Inventory '$inventory' not found."
		exit 1
	fi
fi
# inventory must not be set if using other platforms
if [[ $platform != "static" ]]; then
	if [[ "$inventory" ]]; then
		echo "Inventory must not be provided when using non-static infrastructure."
		exit 1
	fi
fi
# number of cluster nodes. make sure it's a number, and within some limits
if [[ "$cluster_nodes" ]]; then case "$cluster_nodes" in
	# Between 0 and 200
	[1-9]|[1-9][0-9]|1[0-9][0-9]|200)
		;;
	*)
		echo "Invalid number of cluster nodes '$cluster_nodes'. Value should be a number between 1 and 200."
		exit 1
		;;
esac; fi

stack_data_dir="stacks/${stack_name}_${platform}_${distro}_${stack_type}"
mkdir -p "${stack_data_dir}"

mkdir -p "stacks/cache"
mkdir -p "stacks/cache/$stack_type"
mkdir -p "stacks/cache/romana"

ansible_args=( -e stack_name="$stack_name" -e platform="$platform" -e distro="$distro" -e stack_type="$stack_type" -e stack_data_dir="$stack_data_dir" )

# Add an EC2 keypair to the instance if there's one defined.
if [[ "$platform" == "aws" ]] && [[ -r ~/.aws/ec2_keypair ]]; then
	read ec2_keypair _ < ~/.aws/ec2_keypair
	if [[ "$ec2_keypair" ]]; then
		ansible_args+=( -e ec2_keypair="$ec2_keypair" )
	fi
fi
# Add static inventory setting if platform is static
if [[ "$platform" == "static" ]]; then
	ansible_args+=( -e static_inventory="$inventory" )
fi

# Add number of compute nodes. One fewer than number of cluster nodes.
# Needs JSON format so Ansible treats it as an integer
if [[ "$cluster_nodes" ]]; then
	ansible_args+=( -e '{ "compute_nodes": '"$((cluster_nodes - 1))"'}')
fi

# Change install source
if [[ "$core_source" ]]; then
	ansible_args+=( -e romana_core_source="$core_source" )
fi
# Change source repo url
if [[ "$github_repo" ]]; then
	ansible_args+=( -e romana_repo_path="$github_repo" )
elif [[ "$github_user" ]]; then
	ansible_args+=( -e romana_repo_path="git@github.com:$github_user" )
fi
# Change branches to pull
if [[ "$core_branch" ]]; then
	ansible_args+=( -e romana_core_branch="$core_branch" )
fi
if [[ "$networking_branch" ]]; then
	ansible_args+=( -e romana_networking_branch="$networking_branch" )
fi
if [[ "$kube_branch" ]]; then
	ansible_args+=( -e romana_kube_branch="$kube_branch" )
fi
# Change github key
if [[ "$github_key" ]]; then
	ansible_args+=( -e github_key="$github_key" )
fi

case "$platform" in
	aws|vagrant|static)
		case "$action" in
			install)
				ansible-playbook "$@" "${ansible_args[@]}" -i localhost create_hosts.yml  || exit 1
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" post-create.yml
				hosts_ready=0
				for ((i=0; i < 5; i++)); do
					echo "Attempting to connect to hosts"
					# ansible ping requires python, if python is missing then
					# install it later below and use raw mode here instead.
					# if ansible -i "${stack_data_dir}/inventory" stack_nodes -m ping; then
					if ansible -i "${stack_data_dir}/inventory" stack_nodes -m raw -a "uname -a"; then
						hosts_ready=1
						break
					fi
					echo "Retrying in 10 seconds."
					sleep 10
					
				done
				if (( ! hosts_ready )); then
					echo "Unable to reach host(s). Exiting"
					exit 1
				fi
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" install_python.yml
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" config.yml &&
					[[ -f "${stack_data_dir}/stackinfo" ]] && cat "${stack_data_dir}/stackinfo"
				;;
			uninstall)
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" pre-delete.yml
				ansible-playbook "$@" "${ansible_args[@]}" -i localhost delete_hosts.yml
				;;
			test)
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" pre-tests.yml
				passed=0
				if ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" tests.yml; then
					passed=1
				fi
				ansible-playbook "$@" "${ansible_args[@]}" -i "${stack_data_dir}/inventory" post-tests.yml
				[[ -f "${stack_data_dir}/clustertests.log" ]] && cat "${stack_data_dir}/clustertests.log"
				if ! (( passed )); then
					exit 1
				fi
				;;
			*)
				echo "Unknown action '$action' for platform '$platform'"
				exit 1
				;;
		esac
		;;
	*)
		echo "Unknown platform '$platform'"
		exit 1
		;;
esac
