#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Runs a set of tests on a node in the cluster.
# Each test should return success/failure and output a single-line summary
# Each test should have a -v option (verbose) to emit more information
# 
# Tests are defined in a config file in the directory being tested
#
# Command-line options:
# -d directory
# Specify the directory that contains the tests.
# This option can be specified multiple times.
# If any of the directories is not valid or missing a test configuration, an error occurs.
# If this option is not specified, then the current directory will be checked.
# Then direct subdirectories will be checked.
# If neither of those find valid config file(s), then an error occurs.
# -l label
# Only run tests with the specified label
# This option can be specified multiple times.
# If no labels are specified, then all tests will be executed.
# -v
# Run tests in verbose mode.
# 
# Config files follow a simple format. They consist of a series of blocks
# separated by whitespace or comment lines. Each block must contain a "command"
# and can have optional "description", "arguments" and "labels".
# Any content following a '#' character treated as a comment and ignored.

# Define some common functions
usage() {
	echo "clustertest: command-line tool for running a set of test scripts"
	echo "Usage: clustertest [-d directory] [-l label] [-v]"
	echo "       clustertest [-h"
	echo "Options:"
	echo "       -d directory: Use the specified directory for the configuration"
	echo "                     and scripts/commands to execute. This can be used"
	echo "                     multiple times."
	echo "       -l label:     Only run tests with the specified label. This can"
	echo "                     be used multiple times."
	echo "       -v:           Run tests in verbose mode."
	echo "       -h:           Show a help message."
}

fatal_error() {
	printf "$(date +"%Y-%m-%d %H:%M:%S") (%s) FATAL%s\n" "${0##*/}" "$(printf " %s" "$@")"
	exit 1
}

log_message() {
	printf "$(date +"%Y-%m-%d %H:%M:%S") (%s)%s\n" "${0##*/}" "$(printf " %s" "$@")"
}
log_start() {
	printf "$(date +"%Y-%m-%d %H:%M:%S") (%s)%s" "${0##*/}" "$(printf " %s" "$@")"
}
log_append() {
	printf " %s" "$@"
}
log_end() {
	printf " %s\n" "$@"
}

# Parse command-line options
directories=()
test_labels=()
verbose=

while (( $# > 0 )); do case "$1" in
	-d)
	# Check if the directory exists
	if ! [[ -d "$2" ]]; then
		fatal_error "-d '$2': directory does not exist, or not a directory."
	fi
	directories+=( "$2" )
	shift 2
	;;
-l)
	# Check if the label was already defined
	label_found=0
	for label in "${test_labels[@]}"; do
		if [[ "$label" = "$2" ]]; then
			label_found=1
			break
		fi
	done
	# Add to array if not already defined
	if (( ! label_found )); then
		log_message "Adding label $2"
		test_labels+=( "$2" )
	fi
	shift 2
	;;
-v)
	verbose=set
	shift
	;;
-h)
	usage
	exit 0
	;;
*)
	fatal_error "Unknown option '$1'. Run clustertest -h to see the permitted options."
	;;
esac; done

# Try to find appropriate config(s) to parse
if (( ${#directories[@]} )); then
	configs=()
	for i in "${directories[@]}"; do
		conf="$i/tests"
		# it's something we can read..
		if ! [[ -d "$conf" ]] && [[ -r "$conf" ]]; then
			configs+=( "$conf" )
		else
			fatal_error "Expected config file in '$conf'."
		fi
	done
else
	# Try current directory
	conf="./tests"
	if ! [[ -d "$conf" ]] && [[ -r "$conf" ]]; then
		configs=( "$conf" )
	else
		# Try immediate subdirectories
		for conf in */tests; do
			if ! [[ -d "$conf" ]] && [[ -r "$conf" ]]; then
				configs+=( "$conf" )
			fi
		done
	fi
	if (( ${#configs[@]} == 0 )); then
		fatal_error "Unable to find config file for tests"
	fi
fi

# Parse the config files
set_pwd() {
	pwd="$1"
}
set_command() {
	set=1
	cmd="$1"
}
set_args() {
	set=1
	read -ra args <<< "${@}"
}
set_description() {
	set=1
	desc="$1"
}
set_labels() {
	set=1
	read -ra labels <<< "${@//,/ /}"
}
save_settings() {
	# Return OK if nothing to save
	if ! (( set )); then
		return 0
	fi
	# Return error if (required) command not provided
	if ! [[ "$cmd" ]]; then
		return 1
	fi

	pwds+=( "$pwd" )
	commands+=( "$cmd" )
	args_i+=( "${#args_v[@]}" )
	args_l+=( "${#args[@]}" )
	args_v+=( "${args[@]}" )
	descriptions+=( "$desc" )
	labels_i+=( "${#labels_v[@]}" )
	labels_l+=( "${#labels[@]}" )
	labels_v+=( "${labels[@]}" )

	# Reset saved values
	set=0
	cmd=""
	args=()
	desc=""
	labels=()
}

pwds=()
commands=()
args_i=()
args_l=()
args_v=()
descriptions=()
labels_i=()
labels_l=()
labels_v=()

parse_file() {
	if (( $# != 1 )); then
		fatal_error "parse_file: expected 1 parameter, got $#"
	fi
	if ! [[ -r "$1" ]]; then
		fatal_error "parse_file: '$1' is not readable"
	fi

	set_pwd "${1%/*}"
	while read -r line; do
		((num++))
		# Remove comments
		line="${line//#*/}"
		# Skip blank (whitespace-only) lines
		if ! [[ "${line//[[:space:]]/}" ]]; then
			save_settings
			continue
		fi
		read -r keyword rest <<< "$line"
		case "$keyword" in
			command:)
				set_command "$rest"	
				;;
			args:)
				set_args "$rest"
				;;
			description:)
				set_description "$rest"
				;;
			labels:)
				set_labels "$rest"
				;;
			*)
				fatal_error "parse_file: '$1':$num: unknown keyword '$keyword'"
		esac
	done < "$1"
	save_settings
}

for config in "${configs[@]}"; do
	parse_file "$config"
done

if (( ${#commands[@]} == 0 )); then
	fatal_error "No tests configured"
fi

if (( ${#test_labels[@]} == 0 )); then
	fatal_error "No labels specified"
fi

has_labels() {
	found=0
	for test_label in "${test_labels[@]}"; do
		for cmd_label in "${labels_v[@]:${labels_i[$1]}:${labels_l[$1]}}"; do
			if [[ "$test_label" = "$cmd_label" ]]; then
				((found++))
			fi
		done
	done
	if (( found != ${#test_labels[@]} )); then
		return 1
	fi
}

# Now run allthethings
summary=()
num_tests=0
num_passed=0
num_failed=0
num_skipped=0

for ((i=0; i < ${#commands[@]}; i++)); do
	(( num_tests++ ))
	test_number=$((i+1))
	if [[ "${descriptions[i]}" ]]; then
		log_start "Test #${test_number}: ${descriptions[i]}"
	else
		log_start "Test #${test_number}: ${commands[i]}"
	fi
	if ! has_labels "$i"; then
		(( num_skipped++ ))
		log_end ": SKIPPED"
		continue
	fi
	header="Test #${test_number}"
	summary+=( "$header" )
	summary+=( "${header//?/-}" )
	if output=$( cd "${pwds[i]}"; PATH=".:$PATH" "${commands[i]}" ${verbose:+"-v"} "${args_v[@]:${args_i[i]}:${args_l[i]}}" 2>&1); then 
		(( num_passed++ ))
		log_end ": PASSED"
	else
		(( num_failed++ ))
		log_end ": FAILED"
	fi
	summary+=( "$output" )
	summary+=( "" )
done

log_message "Summary of ${num_tests} tests:"
log_message "Passed: ${num_passed}   Failed: ${num_failed}   Skipped: ${num_skipped}"
printf "%s\n" "${summary[@]}"

if (( num_failed > 0 )); then
	fatal_error "${num_failed} tests failed"
fi
if (( num_tests == num_skipped )); then
	log_message "All tests skipped."
fi
